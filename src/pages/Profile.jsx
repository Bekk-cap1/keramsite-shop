import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useUserAuth } from "../contexts/UserAuthContext";
import { toast } from "react-toastify";
import axios from "axios";
import Modal from "../components/Modal";

const Profile = () => {
  const navigate = useNavigate();
  const { user, logout, loading } = useUserAuth();

  const [orders, setOrders] = useState([]);
  const [sortKey, setSortKey] = useState("date");
  const [showPassport, setShowPassport] = useState(false);
  const [expandedOrderId, setExpandedOrderId] = useState(null);
  const [verificationMethod, setVerificationMethod] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [authToken, setAuthToken] = useState();
  const [verificationCode, setVerificationCode] = useState("");

  useEffect(() => {
    if(!user.isPhoneVerified && !user.isEmailVerified){
      setAuthToken(localStorage.getItem("token"));
    }
  }, []);

  const [passwordData, setPasswordData] = useState({
    current: "",
    newPass: "",
    confirm: "",
  });

  useEffect(() => {
    if (!loading && !user) navigate("/login");

    const fetchOrders = async () => {
      try {
        const token = localStorage.getItem("token");
        const res = await axios.get("/api/orders/", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setOrders(res.data.orders);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:", err);
        toast.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã");
      }
    };

    if (user) {
      fetchOrders();
      if (!user.isEmailVerified || !user.isPhoneVerified) {
        setShowModal(true);
      }
    }
  }, [user, loading, navigate]);

  const handleChangePassword = async () => {
    if (passwordData.newPass !== passwordData.confirm) {
      toast.error("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!");
      return;
    }

    try {
      const token = localStorage.getItem("token");
      const res = await axios.patch(
        "/api/users/password",
        {
          currentPassword: passwordData.current,
          newPassword: passwordData.newPass,
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      toast.success("‚úÖ " + res.data.message);
      setPasswordData({ current: "", newPass: "", confirm: "" });
    } catch (err) {
      console.error("changePassword xatosi:", err);
      toast.error("‚ùå " + (err.response?.data?.message || err.message));
    }
  };

  const maskPassport = (passport) => {
    if (!passport) return "‚Äî";
    return showPassport
      ? passport
      : passport.slice(0, 2) + "*****" + passport.slice(-2);
  };

  const sortedOrders = [...orders].sort((a, b) => {
    if (sortKey === "date") {
      return new Date(b.createdAt) - new Date(a.createdAt);
    } else if (sortKey === "status") {
      return (a.status || "–æ–∂–∏–¥–∞–µ—Ç").localeCompare(b.status || "–æ–∂–∏–¥–∞–µ—Ç");
    }
    return 0;
  });

  const handleEmailVerification = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(
        "/api/auth/verify-email",
        {
          code: verificationCode,
          email: user.email,
        },
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        }
      );

      if (response.data.success) {
        toast.success(response.data.message);
        setShowModal(false);
        window.location.reload()
        setVerificationCode("");
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–æ—á–∫–∏
        // –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±, –Ω–æ –ª—É—á—à–µ –±—ã–ª–æ –±—ã —Å–¥–µ–ª–∞—Ç—å re-fetch –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // user.isEmailVerified = true;
        // console.log(user)
      } else {
        toast.error(response.data.error || "Tasdiqlashda xatolik yuz berdi.");
      }
    } catch (err) {
      const errorMessage =
        err.response?.data?.error ||
        err.response?.data?.message ||
        "Tasdiqlash kodi noto'g'ri yoki eskirgan.";
      toast.error(errorMessage);
    }
  };

  const handlePhoneVerification = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post(
        "http://localhost:5000/api/auth/verify-phone",
        {
          code: verificationCode,
        },
        {
          headers: {
            Authorization: `Bearer ${authToken}`,
          },
        }
      );
      if (response.data.success) {
        toast.success(response.data.message);
        setShowModal(false);
        setVerificationCode("");
        window.location.reload()
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // user.isPhoneVerified = true;
      } else {
        toast.error(response.data.error || "Tasdiqlashda xatolik yuz berdi.");
      }
    } catch (err) {
      const errorMessage =
        err.response?.data?.error ||
        err.response?.data?.message ||
        "Tasdiqlash kodi noto'g'ri yoki eskirgan.";
      toast.error(errorMessage);
    }
  };

  const handleSelectEmail = () => {
    setVerificationMethod("email");
    resendEmailCode();
  };

  const handleSelectPhone = () => {
    setVerificationMethod("phone");
    resendPhoneCode();
  };

  const resendEmailCode = async () => {
    try {
      const authToken = localStorage.getItem("token");
      const res = await axios.post(
        "/api/auth/resend-email-code",
        {}, // –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, email –±–µ—Ä–µ—Ç—Å—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
        {
          headers: { Authorization: `Bearer ${authToken}` },
        }
      );

      if (res.data.success) {
        toast.success("‚úÖ –ö–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–æ—á—Ç—É!");
      } else {
        toast.error(res.data.error || "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –Ω–∞ –ø–æ—á—Ç—É");
      }
    } catch (err) {
      toast.error(err.response?.data?.error || "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥");
    }
  };

  const resendPhoneCode = async () => {
    try {
      const authToken = localStorage.getItem("token");
      const res = await axios.post(
        "/api/auth/resend-phone-code",
        {}, // –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, phone –±–µ—Ä–µ—Ç—Å—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
        {
          headers: { Authorization: `Bearer ${authToken}` },
        }
      );

      if (res.data.success) {
        toast.success("‚úÖ –ö–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω!");
      } else {
        toast.error(res.data.error || "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω");
      }
    } catch (err) {
      toast.error(err.response?.data?.error || "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥");
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen text-gray-600">
        ‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 py-6 px-4 sm:px-6 lg:px-8">
      <div className="max-w-5xl mx-auto space-y-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
          <h2 className="text-2xl sm:text-3xl font-bold text-gray-800">
            üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
          </h2>
          <button
            onClick={logout}
            className="mt-4 sm:mt-0 bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg shadow transition"
          >
            –í—ã–π—Ç–∏
          </button>
        </div>

        {/* –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è */}
        {user && (
          <div className="bg-white rounded-xl shadow p-6 space-y-6">
            <h3 className="text-lg font-semibold text-gray-800">
              –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
            </h3>
            <div className="grid gap-3 sm:grid-cols-2">
              <p>
                <strong>–§–ò–û:</strong> {user.firstName + " " + user.lastName || "‚Äî"}
              </p>
              <div className="flex items-center space-x-2">
                <strong>Email:</strong> {user.email || "‚Äî"}
                {user.isEmailVerified ? (
                  <span className="text-green-500">‚úÖ</span>
                ) : (
                  <button
                    onClick={() => {
                      setShowModal(true);
                    }}
                    className="ml-2 text-blue-500 underline"
                  >
                    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                  </button>
                )}
              </div>
              <div className="flex items-center space-x-2">
                <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {user.phone || "‚Äî"}
                {user.isPhoneVerified ? (
                  <span className="text-green-500">‚úÖ</span>
                ) : (
                  <button
                    onClick={() => {
                      setShowModal(true);
                    }}
                    className="ml-2 text-blue-500 underline"
                  >
                    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                  </button>
                )}
              </div>
              <p>
                <strong>–ü–∞—Å–ø–æ—Ä—Ç:</strong> {maskPassport(user.passport)}
                <button
                  onClick={() => setShowPassport(!showPassport)}
                  className="ml-2 text-blue-500 underline"
                >
                  {showPassport ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–∫–∞–∑–∞—Ç—å"}
                </button>
              </p>
            </div>
          </div>
        )}

        {/* –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è */}
        <div className="bg-white rounded-xl shadow p-6 space-y-4">
          <h3 className="text-lg font-semibold text-gray-800">
            –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
          </h3>
          <input
            type="password"
            placeholder="–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
            value={passwordData.current}
            onChange={(e) =>
              setPasswordData({ ...passwordData, current: e.target.value })
            }
            className="w-full border rounded-lg px-3 py-2"
          />
          <input
            type="password"
            placeholder="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
            value={passwordData.newPass}
            onChange={(e) =>
              setPasswordData({ ...passwordData, newPass: e.target.value })
            }
            className="w-full border rounded-lg px-3 py-2"
          />
          <input
            type="password"
            placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            value={passwordData.confirm}
            onChange={(e) =>
              setPasswordData({ ...passwordData, confirm: e.target.value })
            }
            className="w-full border rounded-lg px-3 py-2"
          />
          <button
            onClick={handleChangePassword}
            className="bg-indigo-500 hover:bg-indigo-600 text-white px-4 py-2 rounded-lg shadow transition"
          >
            –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
          </button>
        </div>

        {/* –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ */}
        <div>
          <div className="flex items-center gap-2 mb-4">
            <h3 className="text-lg font-semibold text-gray-800">
              –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
            </h3>
            <select
              className="bg-white border border-gray-300 rounded-lg px-3 py-2 shadow-sm focus:ring-2 focus:ring-blue-400 focus:outline-none"
              value={sortKey}
              onChange={(e) => setSortKey(e.target.value)}
            >
              <option value="date">–ü–æ –¥–∞—Ç–µ</option>
              <option value="status">–ü–æ —Å—Ç–∞—Ç—É—Å—É</option>
            </select>
          </div>

          {sortedOrders.length === 0 ? (
            <p className="text-gray-500 text-center text-lg">–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.</p>
          ) : (
            <ul className="space-y-4">
              {sortedOrders.map((order) => (
                <li
                  key={order._id}
                  className="bg-white rounded-xl shadow p-4 hover:shadow-md transition"
                >
                  {/* –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å –∑–∞–∫–∞–∑–∞ */}
                  <div
                    className="flex justify-between items-center cursor-pointer"
                    onClick={() =>
                      setExpandedOrderId(
                        expandedOrderId === order._id ? null : order._id
                      )
                    }
                  >
                    <div>
                      <p className="text-sm text-gray-500 mb-1">
                        üìÖ {new Date(order.createdAt).toLocaleString()}
                      </p>
                      <p className="text-lg font-semibold text-gray-800 mb-1">
                        üÜî {order.orderNumber} ‚Äî {order.items.length} —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî{" "}
                        {order.total} —Å—É–º
                      </p>
                      <p className="text-sm text-gray-700">
                        üìå –î–æ—Å—Ç–∞–≤–∫–∞:{" "}
                        {order.deliveryMethod === "pickup"
                          ? "–°–∞–º–æ–≤—ã–≤–æ–∑"
                          : `${order.deliveryMethod} (${order.deliveryVehicle || "-"
                          })`}
                      </p>
                    </div>
                    <span className="text-blue-500">
                      {expandedOrderId === order._id ? "‚ñ≤" : "‚ñº"}
                    </span>
                  </div>

                  {/* –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ */}
                  {expandedOrderId === order._id && (
                    <div className="mt-3 border-t pt-3 space-y-2">
                      {order.items.map((item) => (
                        <div
                          key={item.product._id}
                          className="flex justify-between text-gray-700 text-sm"
                        >
                          <span>{item.product.name}</span>
                          <span>
                            {item.quantity} √ó {item.price} —Å—É–º
                          </span>
                        </div>
                      ))}
                      <p className="text-gray-700 text-sm mt-2">
                        <strong>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</strong>{" "}
                        {order.deliveryAddress?.address || "‚Äî"}
                      </p>
                      {order.notes && (
                        <p className="text-gray-700 text-sm">
                          <strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</strong> {order.notes}
                        </p>
                      )}
                    </div>
                  )}
                </li>
              ))}
            </ul>
          )}
        </div>

        {showModal && (
          <Modal onClose={() => setShowModal(false)}>
            <div className="flex flex-col items-center p-6 space-y-4">
              <h3 className="text-xl font-bold text-gray-800">
                Tasdiqlash usulini tanlang
              </h3>
              {verificationMethod === "phone" ? (
                <form
                  onSubmit={handlePhoneVerification}
                  className="w-full flex flex-col items-center space-y-4"
                >
                  <p className="text-gray-600 text-center">
                    Telefon raqamingizga yuborilgan kodni kiriting.
                  </p>
                  <input
                    type="text"
                    value={verificationCode}
                    onChange={(e) => setVerificationCode(e.target.value)}
                    placeholder="Tasdiqlash kodi"
                    className="w-full p-2 border rounded-md"
                    required
                  />
                  <button
                    type="submit"
                    className="w-full bg-indigo-600 text-white py-2 rounded-md hover:bg-indigo-700"
                  >
                    Tasdiqlash
                  </button>
                  <button
                    type="button"
                    onClick={resendPhoneCode}
                    className="text-sm text-blue-500 underline mt-2"
                  >
                    Kodni qayta yuborish
                  </button>
                </form>
              ) : verificationMethod === "email" ? (
                <form
                  onSubmit={handleEmailVerification}
                  className="w-full flex flex-col items-center space-y-4"
                >
                  <p className="text-gray-600 text-center">
                    Emailingizga yuborilgan kodni kiriting.
                  </p>
                  <input
                    type="text"
                    value={verificationCode}
                    onChange={(e) => setVerificationCode(e.target.value)}
                    placeholder="Tasdiqlash kodi"
                    className="w-full p-2 border rounded-md"
                    required
                  />
                  <button
                    type="submit"
                    className="w-full bg-blue-600 text-white py-2 rounded-md hover:bg-blue-700"
                  >
                    Tasdiqlash
                  </button>
                  <button
                    type="button"
                    onClick={resendEmailCode}
                    className="text-sm text-blue-500 underline mt-2"
                  >
                    Kodni qayta yuborish
                  </button>
                </form>
              ) : (
                <>
                  <p className="text-gray-600 text-center">
                    Ro‚Äòyxatdan o‚Äòtishni yakunlash uchun, iltimos, tanlangan usul
                    orqali tasdiqlang.
                  </p>
                  <div className="w-full space-y-2">
                      <button
                        onClick={handleSelectEmail} 
                        className={`w-full  text-white py-2 rounded-md ${user.isEmailVerified ? "bg-gray-300" : "bg-blue-500 hover:bg-blue-600"}`}
                        disabled={user?.isEmailVerified}
                      >
                        Email orqali tasdiqlash
                      </button>
                      <button
                        onClick={handleSelectPhone}
                        className={`w-full  text-white py-2 rounded-md  ${user.isPhoneVerified ? "bg-gray-500" : "bg-green-500 hover:bg-green-600"}`}
                        disabled={user?.isPhoneVerified}
                      >
                        Telefon orqali tasdiqlash
                      </button>
                  </div>
                </>
              )}
            </div>
          </Modal>
        )}
      </div>
    </div>
  );
};

export default Profile;
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { toast } from "react-toastify";
import { useCart } from "../CartContext"; // <-- –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
import axios from "axios";

const Store = () => {
  const [products, setProducts] = useState([]);
  const [filter, setFilter] = useState("all");
  const [search, setSearch] = useState("");
  const [sort, setSort] = useState("default");
  const [minPrice, setMinPrice] = useState("");
  const [maxPrice, setMaxPrice] = useState("");

  const { cart, addToCart } = useCart(); // <-- –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const res = await axios.get("/api/products");
        setProducts(res.data.products || []);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", err);
      }
    };
    fetchProducts();
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  const filteredProducts = products
    .filter((p) => (filter === "all" ? true : p.category === filter))
    .filter((p) =>
      search
        ? p.name.toLowerCase().includes(search.toLowerCase()) ||
          p.description.toLowerCase().includes(search.toLowerCase())
        : true
    )
    .filter((p) => (minPrice ? p.price >= parseFloat(minPrice) : true))
    .filter((p) => (maxPrice ? p.price <= parseFloat(maxPrice) : true));

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const sortedProducts = [...filteredProducts].sort((a, b) => {
    switch (sort) {
      case "price-asc":
        return a.price - b.price;
      case "price-desc":
        return b.price - a.price;
      case "views":
        return b.views - a.views;
      case "newest":
        return new Date(b.createdAt) - new Date(a.createdAt);
      default:
        return 0;
    }
  });

  return (
    <div className="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
      <h2
        className="text-center text-2xl sm:text-3xl font-bold mb-6"
        style={{ color: "var(--brown)" }}
      >
        üè¨ –ú–∞–≥–∞–∑–∏–Ω
      </h2>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
        <aside className="space-y-6 p-4 rounded-lg shadow-md" style={{ backgroundColor: "var(--white)" }}>
          {/* –ü–æ–∏—Å–∫ */}
          <input
            type="text"
            placeholder="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞..."
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            className="w-full p-2 rounded-md border"
            style={{ borderColor: "var(--brown)", color: "var(--brown)" }}
          />

          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          <div>
            <h3 className="font-bold mb-2" style={{ color: "var(--brown)" }}>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
            <div className="flex flex-col gap-2">
              {[
                { key: "all", label: "–í—Å–µ" },
                { key: "sheben", label: "–©–µ–±–µ–Ω—å" },
                { key: "qum", label: "–ü–µ—Å–æ–∫" },
                { key: "sement", label: "–¶–µ–º–µ–Ω—Ç" },
                { key: "g'isht", label: "–ö–∏—Ä–ø–∏—á" },
                { key: "beton", label: "–ë–µ—Ç–æ–Ω" },
                { key: "boshqa", label: "–î—Ä—É–≥–æ–µ" },
              ].map(({ key, label }) => (
                <button
                  key={key}
                  onClick={() => setFilter(key)}
                  className="px-3 py-2 rounded-lg text-left font-medium transition-colors"
                  style={{
                    backgroundColor: filter === key ? "var(--brown)" : "var(--beige)",
                    color: filter === key ? "var(--cream)" : "var(--brown)",
                  }}
                >
                  {label}
                </button>
              ))}
            </div>
          </div>

          {/* –¶–µ–Ω–∞ */}
          <div>
            <h3 className="font-bold mb-2" style={{ color: "var(--brown)" }}>–¶–µ–Ω–∞</h3>
            <div className="flex gap-2">
              <input
                type="number"
                placeholder="–ú–∏–Ω"
                value={minPrice}
                onChange={(e) => setMinPrice(e.target.value)}
                className="p-2 rounded-md border w-20"
                style={{ borderColor: "var(--brown)", color: "var(--brown)" }}
              />
              <input
                type="number"
                placeholder="–ú–∞–∫—Å"
                value={maxPrice}
                onChange={(e) => setMaxPrice(e.target.value)}
                className="p-2 rounded-md border w-20"
                style={{ borderColor: "var(--brown)", color: "var(--brown)" }}
              />
            </div>
          </div>

          {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
          <div>
            <h3 className="font-bold mb-2" style={{ color: "var(--brown)" }}>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</h3>
            <select
              value={sort}
              onChange={(e) => setSort(e.target.value)}
              className="p-2 rounded-md border w-full"
              style={{ borderColor: "var(--brown)", color: "var(--brown)" }}
            >
              <option value="default">–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é</option>
              <option value="price-asc">–¶–µ–Ω–∞ ‚Üë</option>
              <option value="price-desc">–¶–µ–Ω–∞ ‚Üì</option>
              <option value="views">–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å</option>
              <option value="newest">–ù–æ–≤–∏–Ω–∫–∏</option>
            </select>
          </div>

          {/* –°–±—Ä–æ—Å */}
          <button
            onClick={() => {
              setFilter("all");
              setSearch("");
              setSort("default");
              setMinPrice("");
              setMaxPrice("");
            }}
            className="px-4 py-2 rounded-md font-bold w-full"
            style={{ backgroundColor: "var(--beige)", color: "var(--brown)" }}
          >
            –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
          </button>
        </aside>

        {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
        <main className="md:col-span-3">
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {sortedProducts.map((item) => (
              <div
                key={item._id}
                className="flex flex-col justify-between rounded-lg shadow-md p-4 transition-transform hover:scale-105"
                style={{ backgroundColor: "var(--white)" }}
              >
                <Link to={`/store/${item._id}`} className="cursor-pointer">
                  <img
                    src={item.images?.[0]?.url}
                    alt={item.name}
                    className="w-full h-44 sm:h-52 object-contain mb-4"
                  />
                  <h3 className="text-lg sm:text-xl font-bold mb-1" style={{ color: "var(--brown)" }}>
                    {item.name}
                  </h3>
                </Link>
                <p className="text-sm text-gray-600 mb-2">{item.shortDescription || ""}</p>
                <p className="text-lg font-bold mb-4" style={{ color: "var(--brown)" }}>
                  {item.price.toLocaleString()} —Å—É–º
                </p>

                <div className="flex flex-col sm:flex-row gap-2">
                  {/* üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç */}
                  <button
                    onClick={() => addToCart(item)}
                    className="px-4 py-2 rounded-md font-semibold w-full sm:w-auto cursor-pointer"
                    style={{ backgroundColor: "var(--beige)", color: "var(--brown)"}}
                  >
                    –í –∫–æ—Ä–∑–∏–Ω—É
                  </button>

                  <Link
                    to={`/store/${item._id}`}
                    className="px-4 py-2 rounded-md font-semibold text-center w-full sm:w-auto"
                    style={{ backgroundColor: "var(--brown)", color: "var(--cream)" }}
                  >
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                  </Link>
                </div>
              </div>
            ))}
          </div>
        </main>
      </div>
    </div>
  );
};

export default Store;
